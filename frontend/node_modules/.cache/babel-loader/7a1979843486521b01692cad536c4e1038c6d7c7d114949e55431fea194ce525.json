{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      paciente_id: '',\n      profissional_id: '',\n      data_hora: '',\n      status: 'Agendado',\n      mensagem: '',\n      pacientes: [],\n      profissionais: []\n    };\n  },\n  mounted() {\n    this.carregarPacientes();\n    this.carregarProfissionais();\n  },\n  methods: {\n    async carregarPacientes() {\n      try {\n        const res = await axios.get('http://localhost:5000/api/pacientes');\n        this.pacientes = res.data;\n      } catch (err) {\n        console.error('Erro ao carregar pacientes:', err);\n      }\n    },\n    async carregarProfissionais() {\n      try {\n        const res = await axios.get('http://localhost:5000/api/funcionarios');\n        this.profissionais = res.data;\n      } catch (err) {\n        console.error('Erro ao carregar profissionais:', err);\n      }\n    },\n    async criarAgendamento() {\n      try {\n        await axios.post('http://localhost:5000/api/agendamentos', {\n          paciente_id: this.paciente_id,\n          profissional_id: this.profissional_id,\n          data_hora: this.data_hora,\n          status: this.status\n        });\n        this.mensagem = 'Agendamento criado com sucesso!';\n        this.paciente_id = '';\n        this.profissional_id = '';\n        this.data_hora = '';\n        this.status = 'Agendado';\n      } catch (error) {\n        this.mensagem = 'Erro ao criar agendamento.';\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","paciente_id","profissional_id","data_hora","status","mensagem","pacientes","profissionais","mounted","carregarPacientes","carregarProfissionais","methods","res","get","err","console","error","criarAgendamento","post"],"sources":["E:\\PROGRAMAS\\agenda-facil\\frontend\\src\\components\\AgendamentoForm.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Agendar Consulta</h2>\r\n    <form @submit.prevent=\"criarAgendamento\">\r\n      <label>Paciente:</label>\r\n      <select v-model=\"paciente_id\" required>\r\n        <option disabled value=\"\">Selecione um paciente</option>\r\n        <option v-for=\"p in pacientes\" :key=\"p.id\" :value=\"p.id\">\r\n          {{ p.nome }}\r\n        </option>\r\n      </select>\r\n\r\n      <label>Profissional:</label>\r\n      <select v-model=\"profissional_id\" required>\r\n        <option disabled value=\"\">Selecione um profissional</option>\r\n        <option v-for=\"f in profissionais\" :key=\"f.id\" :value=\"f.id\">\r\n          {{ f.nome }}\r\n        </option>\r\n      </select>\r\n\r\n      <label>Data e hora:</label>\r\n      <input v-model=\"data_hora\" type=\"datetime-local\" required />\r\n\r\n      <label>Status:</label>\r\n      <select v-model=\"status\" required>\r\n        <option value=\"Agendado\">Agendado</option>\r\n        <option value=\"Cancelado\">Cancelado</option>\r\n        <option value=\"Concluído\">Concluído</option>\r\n      </select>\r\n\r\n      <button type=\"submit\">Agendar</button>\r\n    </form>\r\n    <p v-if=\"mensagem\">{{ mensagem }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      paciente_id: '',\r\n      profissional_id: '',\r\n      data_hora: '',\r\n      status: 'Agendado',\r\n      mensagem: '',\r\n      pacientes: [],\r\n      profissionais: []\r\n    };\r\n  },\r\n  mounted() {\r\n    this.carregarPacientes();\r\n    this.carregarProfissionais();\r\n  },\r\n  methods: {\r\n    async carregarPacientes() {\r\n      try {\r\n        const res = await axios.get('http://localhost:5000/api/pacientes');\r\n        this.pacientes = res.data;\r\n      } catch (err) {\r\n        console.error('Erro ao carregar pacientes:', err);\r\n      }\r\n    },\r\n    async carregarProfissionais() {\r\n      try {\r\n        const res = await axios.get('http://localhost:5000/api/funcionarios');\r\n        this.profissionais = res.data;\r\n      } catch (err) {\r\n        console.error('Erro ao carregar profissionais:', err);\r\n      }\r\n    },\r\n    async criarAgendamento() {\r\n      try {\r\n        await axios.post('http://localhost:5000/api/agendamentos', {\r\n          paciente_id: this.paciente_id,\r\n          profissional_id: this.profissional_id,\r\n          data_hora: this.data_hora,\r\n          status: this.status\r\n        });\r\n        this.mensagem = 'Agendamento criado com sucesso!';\r\n        this.paciente_id = '';\r\n        this.profissional_id = '';\r\n        this.data_hora = '';\r\n        this.status = 'Agendado';\r\n      } catch (error) {\r\n        this.mensagem = 'Erro ao criar agendamento.';\r\n        console.error(error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"AAqCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,eAAe,EAAE,EAAE;MACnBC,SAAS,EAAE,EAAE;MACbC,MAAM,EAAE,UAAU;MAClBC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,EAAE;MACbC,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,iBAAiB,CAAC,CAAC;IACxB,IAAI,CAACC,qBAAqB,CAAC,CAAC;EAC9B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMF,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMG,GAAE,GAAI,MAAMb,KAAK,CAACc,GAAG,CAAC,qCAAqC,CAAC;QAClE,IAAI,CAACP,SAAQ,GAAIM,GAAG,CAACZ,IAAI;MAC3B,EAAE,OAAOc,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAAC;MACnD;IACF,CAAC;IACD,MAAMJ,qBAAqBA,CAAA,EAAG;MAC5B,IAAI;QACF,MAAME,GAAE,GAAI,MAAMb,KAAK,CAACc,GAAG,CAAC,wCAAwC,CAAC;QACrE,IAAI,CAACN,aAAY,GAAIK,GAAG,CAACZ,IAAI;MAC/B,EAAE,OAAOc,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEF,GAAG,CAAC;MACvD;IACF,CAAC;IACD,MAAMG,gBAAgBA,CAAA,EAAG;MACvB,IAAI;QACF,MAAMlB,KAAK,CAACmB,IAAI,CAAC,wCAAwC,EAAE;UACzDjB,WAAW,EAAE,IAAI,CAACA,WAAW;UAC7BC,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCC,SAAS,EAAE,IAAI,CAACA,SAAS;UACzBC,MAAM,EAAE,IAAI,CAACA;QACf,CAAC,CAAC;QACF,IAAI,CAACC,QAAO,GAAI,iCAAiC;QACjD,IAAI,CAACJ,WAAU,GAAI,EAAE;QACrB,IAAI,CAACC,eAAc,GAAI,EAAE;QACzB,IAAI,CAACC,SAAQ,GAAI,EAAE;QACnB,IAAI,CAACC,MAAK,GAAI,UAAU;MAC1B,EAAE,OAAOY,KAAK,EAAE;QACd,IAAI,CAACX,QAAO,GAAI,4BAA4B;QAC5CU,OAAO,CAACC,KAAK,CAACA,KAAK,CAAC;MACtB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}