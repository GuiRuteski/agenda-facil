{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      agendamentos: [],\n      pacientes: [],\n      profissionais: []\n    };\n  },\n  async mounted() {\n    await Promise.all([this.carregarAgendamentos(), this.carregarPacientes(), this.carregarProfissionais()]);\n  },\n  methods: {\n    async carregarAgendamentos() {\n      try {\n        const response = await axios.get('http://localhost:5000/api/agendamentos');\n        this.agendamentos = response.data;\n      } catch (error) {\n        console.error('Erro ao buscar agendamentos:', error);\n      }\n    },\n    async carregarPacientes() {\n      try {\n        const response = await axios.get('http://localhost:5000/api/pacientes');\n        this.pacientes = response.data;\n      } catch (error) {\n        console.error('Erro ao buscar pacientes:', error);\n      }\n    },\n    async carregarProfissionais() {\n      try {\n        const response = await axios.get('http://localhost:5000/api/funcionarios');\n        this.profissionais = response.data;\n      } catch (error) {\n        console.error('Erro ao buscar profissionais:', error);\n      }\n    },\n    formatarDataHora(dataHora) {\n      const data = new Date(dataHora);\n      return data.toLocaleString('pt-BR');\n    },\n    getPacienteNome(id) {\n      const paciente = this.pacientes.find(p => p.id === id);\n      return paciente ? paciente.nome : `ID ${id}`;\n    },\n    getProfissionalNome(id) {\n      const profissional = this.profissionais.find(f => f.id === id);\n      return profissional ? profissional.nome : `ID ${id}`;\n    },\n    async cancelarAgendamento(id) {\n      const confirmar = confirm(\"Tem certeza que deseja cancelar este agendamento?\");\n      if (!confirmar) return;\n      try {\n        await axios.delete(`http://localhost:5000/api/agendamentos/${id}`);\n        this.agendamentos = this.agendamentos.filter(a => a.id !== id);\n      } catch (error) {\n        console.error('Erro ao cancelar agendamento:', error);\n        alert('Erro ao cancelar agendamento.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","agendamentos","pacientes","profissionais","mounted","Promise","all","carregarAgendamentos","carregarPacientes","carregarProfissionais","methods","response","get","error","console","formatarDataHora","dataHora","Date","toLocaleString","getPacienteNome","id","paciente","find","p","nome","getProfissionalNome","profissional","f","cancelarAgendamento","confirmar","confirm","delete","filter","a","alert"],"sources":["E:\\PROGRAMAS\\agenda-facil\\frontend\\src\\components\\AgendamentoList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Lista de Agendamentos</h2>\r\n\r\n    <ul v-if=\"agendamentos.length > 0\">\r\n      <li v-for=\"a in agendamentos\" :key=\"a.id\">\r\n        <strong>Paciente:</strong> {{ getPacienteNome(a.paciente_id) }} —\r\n        <strong>Profissional:</strong> {{ getProfissionalNome(a.profissional_id) }} —\r\n        <strong>Data:</strong> {{ formatarDataHora(a.data_hora) }} —\r\n        <strong>Status:</strong> {{ a.status }}\r\n        <button @click=\"cancelarAgendamento(a.id)\" style=\"margin-left: 10px;\">Cancelar</button>\r\n      </li>\r\n    </ul>\r\n\r\n    <p v-else>Nenhum agendamento encontrado.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      agendamentos: [],\r\n      pacientes: [],\r\n      profissionais: []\r\n    };\r\n  },\r\n  async mounted() {\r\n    await Promise.all([\r\n      this.carregarAgendamentos(),\r\n      this.carregarPacientes(),\r\n      this.carregarProfissionais()\r\n    ]);\r\n  },\r\n  methods: {\r\n    async carregarAgendamentos() {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/agendamentos');\r\n        this.agendamentos = response.data;\r\n      } catch (error) {\r\n        console.error('Erro ao buscar agendamentos:', error);\r\n      }\r\n    },\r\n    async carregarPacientes() {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/pacientes');\r\n        this.pacientes = response.data;\r\n      } catch (error) {\r\n        console.error('Erro ao buscar pacientes:', error);\r\n      }\r\n    },\r\n    async carregarProfissionais() {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/funcionarios');\r\n        this.profissionais = response.data;\r\n      } catch (error) {\r\n        console.error('Erro ao buscar profissionais:', error);\r\n      }\r\n    },\r\n    formatarDataHora(dataHora) {\r\n      const data = new Date(dataHora);\r\n      return data.toLocaleString('pt-BR');\r\n    },\r\n    getPacienteNome(id) {\r\n      const paciente = this.pacientes.find(p => p.id === id);\r\n      return paciente ? paciente.nome : `ID ${id}`;\r\n    },\r\n    getProfissionalNome(id) {\r\n      const profissional = this.profissionais.find(f => f.id === id);\r\n      return profissional ? profissional.nome : `ID ${id}`;\r\n    },\r\n    async cancelarAgendamento(id) {\r\n      const confirmar = confirm(\"Tem certeza que deseja cancelar este agendamento?\");\r\n      if (!confirmar) return;\r\n\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/agendamentos/${id}`);\r\n        this.agendamentos = this.agendamentos.filter(a => a.id !== id);\r\n      } catch (error) {\r\n        console.error('Erro ao cancelar agendamento:', error);\r\n        alert('Erro ao cancelar agendamento.');\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nbutton {\r\n  background-color: #e74c3c;\r\n  color: white;\r\n  border: none;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\nbutton:hover {\r\n  background-color: #c0392b;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}